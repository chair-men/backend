var express = require("express");
var router = express.Router();
var { getLocationFromPostalCode, getToken } = require("../utils/helper");
var { getAllCarparks } = require("../utils/database");
var { getDistanceFromLatLonInKm, SVY21 } = require("../utils/distance");
var { supabase } = require("../utils/database");

const layout1A = [
  { tl: [435.70799999999997, 715.8059999999999], br: [613.548, 804.726] },
  { tl: [440.154, 818.064], br: [617.9939999999999, 911.43] },
  { tl: [440.154, 991.458], br: [613.548, 1071.4859999999999] },
  { tl: [444.59999999999997, 1089.27], br: [617.9939999999999, 1169.298] },
  { tl: [1044.81, 658.0079999999999], br: [1120.3919999999998, 835.848] },
  { tl: [1147.068, 658.0079999999999], br: [1218.204, 840.294] },
  { tl: [1240.434, 653.562], br: [1316.0159999999998, 835.848] },
  { tl: [1391.598, 653.562], br: [1476.072, 835.848] },
  { tl: [1484.964, 658.0079999999999], br: [1564.992, 831.4019999999999] },
  { tl: [1578.33, 658.0079999999999], br: [1658.358, 835.848] },
  { tl: [1747.2779999999998, 658.0079999999999], br: [1822.86, 835.848] },
  { tl: [1840.644, 658.0079999999999], br: [1916.2259999999999, 835.848] },
  { tl: [1934.01, 658.0079999999999], br: [2014.0379999999998, 835.848] },
  { tl: [2089.62, 662.454], br: [2165.2019999999998, 831.4019999999999] },
  {
    tl: [2187.432, 658.0079999999999],
    br: [2263.0139999999997, 831.4019999999999],
  },
  { tl: [2276.352, 653.562], br: [2356.3799999999997, 831.4019999999999] },
  { tl: [2440.854, 658.0079999999999], br: [2511.99, 831.4019999999999] },
  {
    tl: [2538.6659999999997, 658.0079999999999],
    br: [2609.8019999999997, 835.848],
  },
  { tl: [2627.586, 658.0079999999999], br: [2703.1679999999997, 835.848] },
  { tl: [2787.642, 662.454], br: [2863.2239999999997, 835.848] },
  { tl: [2881.008, 662.454], br: [2956.5899999999997, 831.4019999999999] },
  { tl: [2978.8199999999997, 662.454], br: [3054.402, 835.848] },
  { tl: [3490.1099999999997, 724.698], br: [3654.6119999999996, 800.28] },
  {
    tl: [3494.5559999999996, 826.9559999999999],
    br: [3659.058, 902.5379999999999],
  },
  { tl: [3490.1099999999997, 991.458], br: [3654.6119999999996, 1067.04] },
  { tl: [3490.1099999999997, 1093.716], br: [3663.504, 1169.298] },
  { tl: [698.0219999999999, 1187.0819999999999], br: [778.05, 1364.922] },
  { tl: [791.3879999999999, 1191.528], br: [871.4159999999999, 1369.368] },
  {
    tl: [884.7539999999999, 1187.0819999999999],
    br: [960.3359999999999, 1364.922],
  },
  { tl: [1049.2559999999999, 1191.528], br: [1120.3919999999998, 1364.922] },
  { tl: [1138.176, 1191.528], br: [1218.204, 1364.922] },
  { tl: [1396.0439999999999, 1195.974], br: [1476.072, 1364.922] },
  { tl: [1489.4099999999999, 1191.528], br: [1573.884, 1369.368] },
  { tl: [1587.222, 1187.0819999999999], br: [1662.8039999999999, 1369.368] },
  { tl: [1742.8319999999999, 1187.0819999999999], br: [1822.86, 1364.922] },
  { tl: [1840.644, 1191.528], br: [1916.2259999999999, 1364.922] },
  { tl: [1929.5639999999999, 1191.528], br: [2014.0379999999998, 1364.922] },
  { tl: [2085.174, 1191.528], br: [2165.2019999999998, 1360.4759999999999] },
  { tl: [2182.986, 1182.636], br: [2263.0139999999997, 1360.4759999999999] },
  { tl: [2271.906, 1182.636], br: [2351.9339999999997, 1364.922] },
  { tl: [2440.854, 1187.0819999999999], br: [2516.4359999999997, 1364.922] },
  { tl: [2529.774, 1182.636], br: [2600.91, 1360.4759999999999] },
  { tl: [2627.586, 1187.0819999999999], br: [2698.7219999999998, 1364.922] },
  { tl: [2796.5339999999997, 1191.528], br: [2867.6699999999996, 1364.922] },
  { tl: [2885.4539999999997, 1191.528], br: [2961.0359999999996, 1364.922] },
  { tl: [2974.374, 1187.0819999999999], br: [3054.402, 1364.922] },
  { tl: [3138.8759999999997, 1191.528], br: [3210.0119999999997, 1364.922] },
  {
    tl: [3227.796, 1187.0819999999999],
    br: [3303.3779999999997, 1360.4759999999999],
  },
  { tl: [3325.6079999999997, 1195.974], br: [3401.1899999999996, 1364.922] },
];

const layout1B = [
  {
    tl: [831.4019999999999, 1293.7859999999998],
    br: [1004.7959999999999, 1373.8139999999999],
  },
  {
    tl: [831.4019999999999, 1391.598],
    br: [1000.3499999999999, 1480.5179999999998],
  },
  {
    tl: [831.4019999999999, 1560.5459999999998],
    br: [1000.3499999999999, 1640.5739999999998],
  },
  {
    tl: [826.9559999999999, 1658.358],
    br: [1000.3499999999999, 1742.8319999999999],
  },
  { tl: [1089.27, 1098.162], br: [1160.406, 1280.4479999999999] },
  { tl: [1182.636, 1102.608], br: [1258.2179999999998, 1276.002] },
  { tl: [1280.4479999999999, 1098.162], br: [1356.03, 1284.894] },
  { tl: [1436.058, 1098.162], br: [1511.6399999999999, 1276.002] },
  { tl: [1529.424, 1098.162], br: [1609.452, 1280.4479999999999] },
  { tl: [1618.3439999999998, 1098.162], br: [1702.818, 1284.894] },
  { tl: [1787.292, 1107.0539999999999], br: [1862.8739999999998, 1284.894] },
  { tl: [1876.212, 1102.608], br: [1956.2399999999998, 1280.4479999999999] },
  { tl: [1969.578, 1098.162], br: [2049.6059999999998, 1280.4479999999999] },
  { tl: [2138.526, 1102.608], br: [2214.1079999999997, 1280.4479999999999] },
  { tl: [2227.446, 1098.162], br: [2303.028, 1276.002] },
  { tl: [2320.812, 1098.162], br: [2405.286, 1280.4479999999999] },
  { tl: [2480.868, 1093.716], br: [2556.45, 1280.4479999999999] },
  { tl: [2569.788, 1093.716], br: [2649.816, 1276.002] },
  { tl: [2667.6, 1093.716], br: [2747.6279999999997, 1280.4479999999999] },
  { tl: [2836.548, 1098.162], br: [2907.6839999999997, 1276.002] },
  { tl: [2921.022, 1102.608], br: [2996.604, 1280.4479999999999] },
  { tl: [3018.834, 1098.162], br: [3094.4159999999997, 1276.002] },
  { tl: [3272.256, 1102.608], br: [3347.8379999999997, 1276.002] },
  { tl: [3365.622, 1098.162], br: [3441.2039999999997, 1276.002] },
  {
    tl: [3534.5699999999997, 1098.162],
    br: [3605.7059999999997, 1280.4479999999999],
  },
  { tl: [3619.044, 1093.716], br: [3694.6259999999997, 1276.002] },
  { tl: [3707.964, 1089.27], br: [3787.9919999999997, 1271.5559999999998] },
  {
    tl: [3885.8039999999996, 1298.232],
    br: [4045.8599999999997, 1373.8139999999999],
  },
  { tl: [3876.912, 1396.0439999999999], br: [4045.8599999999997, 1476.072] },
  { tl: [3881.3579999999997, 1564.992], br: [4045.8599999999997, 1645.02] },
  {
    tl: [3881.3579999999997, 1662.8039999999999],
    br: [4045.8599999999997, 1742.8319999999999],
  },
  { tl: [1440.504, 1636.128], br: [1511.6399999999999, 1813.9679999999998] },
  { tl: [1529.424, 1631.682], br: [1605.0059999999999, 1813.9679999999998] },
  { tl: [1622.79, 1636.128], br: [1698.3719999999998, 1818.414] },
  { tl: [1787.292, 1631.682], br: [1867.32, 1813.9679999999998] },
  { tl: [1880.658, 1627.2359999999999], br: [1960.686, 1809.522] },
  {
    tl: [1978.4699999999998, 1627.2359999999999],
    br: [2049.6059999999998, 1809.522],
  },
  { tl: [2142.9719999999998, 1631.682], br: [2214.1079999999997, 1818.414] },
  { tl: [2231.892, 1627.2359999999999], br: [2311.92, 1818.414] },
  {
    tl: [2325.258, 1627.2359999999999],
    br: [2400.8399999999997, 1813.9679999999998],
  },
  { tl: [2476.422, 1631.682], br: [2560.8959999999997, 1809.522] },
  { tl: [2565.3419999999996, 1631.682], br: [2649.816, 1813.9679999999998] },
  { tl: [2663.154, 1627.2359999999999], br: [2747.6279999999997, 1818.414] },
  { tl: [2827.656, 1636.128], br: [2907.6839999999997, 1818.414] },
  { tl: [2921.022, 1636.128], br: [3001.0499999999997, 1818.414] },
  { tl: [3014.388, 1631.682], br: [3094.4159999999997, 1813.9679999999998] },
  { tl: [3178.89, 1636.128], br: [3254.4719999999998, 1813.9679999999998] },
  { tl: [3272.256, 1631.682], br: [3352.2839999999997, 1813.9679999999998] },
  { tl: [3365.622, 1631.682], br: [3441.2039999999997, 1809.522] },
];

/* GET home page. */
router.get("/", async function (req, res, next) {
  // console.log(result);
  // for (var item of result) {
  //   for (var i = 1; i <= 4; i++) {
  //     for (var j = 31; j <= 40; j++) {
  //       x.push({
  //         ppcode: item.ppCode,
  //         ppname: item.ppName,
  //         level: `${Math.ceil(i / 2)}${i % 2 == 0 ? "A" : "B"}`,
  //         lotnumber: j,
  //         vacant: true,
  //         platenumber: null,
  //         tlx: parseFloat(
  //           (i % 2 == 0
  //             ? layout1A[j - 1]["tl"][0]
  //             : layout1B[j - 1]["tl"][0]) / 3
  //         ),
  //         tly: parseFloat(
  //           (i % 2 == 0
  //             ? layout1A[j - 1]["tl"][1]
  //             : layout1B[j - 1]["tl"][1]) / 3
  //         ),
  //         brx: parseFloat(
  //           (i % 2 == 0
  //             ? layout1A[j - 1]["br"][0]
  //             : layout1B[j - 1]["br"][0]) / 3
  //         ),
  //         bry: parseFloat(
  //           (i % 2 == 0
  //             ? layout1A[j - 1]["br"][1]
  //             : layout1B[j - 1]["br"][1]) / 3
  //         ),
  //       });
  //     }
  //   }
  // }
  // for (let item of result) {
  //   for (var i = 1; i <= 4; i++) {
  //     x.push({
  //       carpark_id: item.ppCode,
  //       image_url:
  //         i % 2 == 1
  //           ? "https://gtkphlyjmplbzgehjapq.supabase.co/storage/v1/object/public/chair-men/layout1A.png"
  //           : "https://gtkphlyjmplbzgehjapq.supabase.co/storage/v1/object/public/chair-men/layout1B.png",
  //       lvl: `${Math.ceil(i / 2)}${i % 2 == 1 ? "A" : "B"}`,
  //     });
  //   }
  // }
  // x = x.filter(
  //   (value, index, self) =>
  //     index ===
  //     self.findIndex(
  //       (t) =>
  //         t.carpark_id === value.carpark_id &&
  //         t.lvl === value.lvl &&
  //         t.lotnumber == value.lotnumber
  //     )
  // );
  // const { error } = await supabase.from("levels").insert(x);
  // console.log(error);
  const carparks = await getAllCarparks();
  res.send(carparks);
});

router.get("/search", async function (req, res, next) {
  const carparks = await getAllCarparks();
  var lt, ln;

  const { postal, coords } = req.query;
  if (postal) {
    const location = await getLocationFromPostalCode(req.query.postal);
    console.log(location);
    if (!location) {
      res.send({ error: "Postal code is not working" });
      return;
    }
    [lt, ln] = [location["LATITUDE"], location["LONGITUDE"]];
  } else if (coords) {
    [lt, ln] = coords.split(",");
    if (!ln) {
      res.send({ error: "Coords is not working" });
      return;
    }
  }
  if (lt == null) {
    res.send({ error: "Please add the postal query parameter." });
    return;
  }
  const retRes = carparks.filter((carpark, idx) => {
    if (carpark == undefined) {
      return false;
    }
    const distance = getDistanceFromLatLonInKm(
      carpark.lat,
      carpark.lng,
      lt,
      ln
    );
    return distance < 5;
  });
  const x = retRes.map((carpark, idx) => {
    return {
      id: carpark.carpark_id,
      name: carpark.name,
      coordinates: {
        lat: carpark.lat,
        lng: carpark.lng,
      },
    };
  });
  res.send(x);
});

module.exports = router;
